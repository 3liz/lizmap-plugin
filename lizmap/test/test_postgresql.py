__copyright__ = 'Copyright 2024, 3Liz'
__license__ = 'GPL version 3'
__email__ = 'info@3liz.org'

import os
import unittest

from typing import Union

# noinspection PyPackageRequirements
import psycopg

from qgis.core import (
    QgsAbstractDatabaseProviderConnection,
    QgsAbstractProviderConnection,
    QgsDataSourceUri,
    QgsProviderRegistry,
    QgsVectorLayer,
)

from lizmap.dialogs.server_wizard import ServerWizard
from lizmap.project_checker_tools import (
    auto_generated_primary_key_field,
    invalid_int8_primary_key,
)

# from qgis.testing import start_app
# start_app()


# To run these tests:
# * copy credentials.py.example to credentials.py
# * edit info credentials.py about PostgreSQL

try:
    from lizmap.test.credentials import (
        PG_DATABASE,
        PG_HOST,
        PG_PASSWORD,
        PG_PORT,
        PG_USER,
    )
    CREDENTIALS = True
except ImportError:
    CREDENTIALS = False
    PG_HOST = ''
    PG_PORT = ''
    PG_PASSWORD = ''
    PG_USER = ''
    PG_DATABASE = ''


def skip_test():
    if os.getenv("CI"):
        return True
    if not CREDENTIALS:
        return True
    if not PG_HOST:
        return True
    if not PG_PORT:
        return True
    if not PG_PASSWORD:
        return True
    if not PG_USER:
        return True
    if not PG_DATABASE:
        return True
    return False


class TestSql(unittest.TestCase):

    # noinspection PyPep8Naming
    def __init__(self, methodName="runTest"):
        super().__init__(methodName)
        self.cursor = None
        self.connection = None
        self.schema = "lizmap_plugin_tests"

    @unittest.skipIf(skip_test(), "Missing credentials")
    def setUp(self) -> None:
        self.connection = psycopg.connect(
            f"host={PG_HOST} user={PG_USER} password={PG_PASSWORD} port={PG_PORT} dbname={PG_DATABASE}"
        )
        self.cursor = self.connection.cursor()

        self.cursor.execute(f"DROP SCHEMA IF EXISTS {self.schema} CASCADE;")
        self.cursor.execute("CREATE EXTENSION IF NOT EXISTS postgis;")
        self.cursor.execute(f"CREATE SCHEMA {self.schema};")
        self.connection.commit()

    @classmethod
    def uri(cls) -> QgsDataSourceUri:
        """ URI of the database. """
        uri = QgsDataSourceUri()
        uri.setConnection(
            PG_HOST,
            PG_PORT,
            PG_DATABASE,
            PG_USER,
            PG_PASSWORD,
            QgsDataSourceUri.SslMode.SslPrefer,
        )
        return uri

    def tearDown(self) -> None:
        self.cursor.execute(f"DROP SCHEMA {self.schema} CASCADE;")
        self.connection.commit()
        self.connection.close()

    def test_invalid_auto_generated_pk(self):
        """ Test invalid autogenerated PK. """
        table_name = "test_tid"
        field_name = "id"
        sql = (
            f"CREATE TABLE IF NOT EXISTS {self.schema}.{table_name}"
            f"("
            f"  {field_name} bigint,"
            f"  label text"
            f");"
        )
        self.cursor.execute(sql)
        self.connection.commit()

        self.assertTrue(ServerWizard._save_pg("test", self.uri()))

        metadata = QgsProviderRegistry.instance().providerMetadata('postgres')
        connection = metadata.findConnection("test")
        connection: Union[QgsAbstractProviderConnection, QgsAbstractDatabaseProviderConnection]

        uri = QgsDataSourceUri(self.uri())
        uri.setSchema(self.schema)
        uri.setTable(table_name)
        uri.setKeyColumn(field_name)
        layer = QgsVectorLayer(connection.tableUri(self.schema, table_name), 'test', 'postgres')

        # Only testing QGIS
        self.assertListEqual([], layer.primaryKeyAttributes())
        new_uri = QgsDataSourceUri(layer.source())
        self.assertEqual("tid", new_uri.keyColumn())  # It should be the "id"

        # Lizmap check
        result, field = auto_generated_primary_key_field(layer)
        self.assertTrue(result)
        self.assertEqual("tid", field)

    def test_invalid_varchar_pk(self):
        """ Test invalid varchar primary key. """
        table_name = "test_varchar"
        field_name = "municipality_code"
        sql = (
            f"CREATE TABLE IF NOT EXISTS {self.schema}.{table_name}"
            f"("
            f"  {field_name} VARCHAR(10) PRIMARY KEY,"
            f"  label text"
            f");"
        )
        self.cursor.execute(sql)
        self.connection.commit()

        uri = QgsDataSourceUri(self.uri())
        uri.setSchema(self.schema)
        uri.setTable(table_name)
        uri.setKeyColumn(field_name)
        layer = QgsVectorLayer(uri.uri(False), 'test', 'postgres')

        # Only testing QGIS
        self.assertListEqual([0], layer.primaryKeyAttributes())
        self.assertEqual(field_name, layer.fields().at(layer.primaryKeyAttributes()[0]).name())
        new_uri = QgsDataSourceUri(layer.source())
        self.assertEqual(field_name, new_uri.keyColumn())

        # Lizmap check
        self.assertFalse(invalid_int8_primary_key(layer))
        self.assertTrue(invalid_int8_primary_key(layer, check_field="varchar"))

    def test_valid_integer_pk(self):
        """ Test valid integer primary key. """
        table_name = "test_int"
        field_name = "id"
        sql = (
            f"CREATE TABLE IF NOT EXISTS {self.schema}.{table_name}"
            f"("
            f"  {field_name} SERIAL PRIMARY KEY,"
            f"  label text"
            f");"
        )
        self.cursor.execute(sql)
        self.connection.commit()

        uri = QgsDataSourceUri(self.uri())
        uri.setSchema(self.schema)
        uri.setTable(table_name)
        uri.setKeyColumn(field_name)
        layer = QgsVectorLayer(uri.uri(False), 'test', 'postgres')

        # Only testing QGIS
        self.assertListEqual([0], layer.primaryKeyAttributes())
        self.assertEqual(field_name, layer.fields().at(layer.primaryKeyAttributes()[0]).name())
        new_uri = QgsDataSourceUri(layer.source())
        self.assertEqual(field_name, new_uri.keyColumn())

        # Lizmap check
        self.assertFalse(invalid_int8_primary_key(layer))
        self.assertFalse(invalid_int8_primary_key(layer, check_field="varchar"))


if __name__ == "__main__":
    unittest.main()
