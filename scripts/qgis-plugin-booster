#!/usr/bin/env python3

import argparse
import yaml
from qgispluginbooster.release import release
from qgispluginbooster.translation import Translation
from qgispluginbooster.parameters import Parameters

if __name__ == "__main__":
    """
    Main process
    """

    # create the top-level parser
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--version", help="print the version and exit", action='store_true')

    subparsers = parser.add_subparsers(title='commands', description='qgis-plugin-booster command', dest='command')

    # release
    release_parser = subparsers.add_parser('release', help='release the plugin')
    release_parser.add_argument('release_version', help='The version to be released')
    release_parser.add_argument('--transifex-token', help='The Transifex API token')

    # pull-translation
    pull_tr_parser = subparsers.add_parser('pull-translation', help='release the plugin')
    pull_tr_parser.add_argument('transifex_token', help='The Transifex API token')

    # push-translation
    push_tr_parser = subparsers.add_parser('push-translation', help='release the plugin')
    push_tr_parser.add_argument('transifex_token', help='The Transifex API token')

    args = parser.parse_args()

    # print the version and exit
    if args.version:
        print('qgis-plugin-booster version: {}'.format('[DEV]'))
        parser.exit()

    # if no command is passed, print the help and exit
    if not args.command:
        parser.print_help()
        parser.exit()

    exit_val = 0

    arg_dict = yaml.safe_load(open(".qgis-plugin-booster"))
    parameters = Parameters(arg_dict)

    if args.command == 'release':
        success = release(parameters, release_version=args.release_version, transifex_token=args.transifex_token)
        if not success:
            exit_val = 1
    elif args.command == 'pull-translation':
            success = Translation(parameters, args.transifex_token).pull()
            if not success:
                exit_val = 1
    elif args.command == 'push-translation':
        success = Translation(parameters, args.transifex_token).push()
        if not success:
            exit_val = 1

    exit(exit_val)

